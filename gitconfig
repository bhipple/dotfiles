[alias]
    ama = am --abort
    authors = "!f() { git log --oneline --pretty='%ae' | sort | uniq -c | sort -nk1; }; f"
    # Get all of the blobs in the repo's history, sorted by size
    blobs = "!f() { git rev-list --objects --all \
        | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
        | awk '/^blob/ {print substr($0,6)}' \
        | sort --numeric-sort --key=2 \
        | cut --complement --characters=13-40 \
        | numfmt --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest; \
        }; f"
    bi = bisect
    bib = bisect bad
    big = bisect good
    bir = bisect reset
    bis = bisect start
    br = branch
    bra = branch --all
    ca = commit --amend --no-edit
    ci = commit
    co = checkout
    cob = checkout -b
    cop = "!f() { git fetch ${2:-origin} pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    cp = cherry-pick
    cpc = cherry-pick --continue
    df = diff
    dfc = diff --cached
    dfh = diff -- .
    dfs = diff --stat
    dod = diff origin/dev -w
    dods = diff origin/dev -w --stat
    dom = diff origin/master -w
    doms = diff origin/master -w --stat
    dos = diff origin/stage -w
    dot = diff origin/testing -w
    f = fetch
    fa = fetch --all
    g = !exec git
    git = !exec git
    l = log
    ld = log --decorate
    lg = log --decorate --oneline --graph --branches --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold blue)(%ar) %C(bold yellow)%d%C(reset) %C(green)%s%C(reset) %C(dim green)- %an%C(reset)'
    logdog = log --decorate --oneline --graph
    lp = log -p --stat
    ls = log --stat
    p = pull
    pp = "!git pull && git push"
    pr = pull-request
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
    pu = push
    rb = rebase
    rba = rebase --abort
    find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
    show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
    rbc = rebase --continue
    rf = "!f() { \
       if [ -n $1 ]; then git checkout -f $1 >/dev/null 2>&1; fi; \
       git fetch --all --prune >/dev/null 2>&1; \
       for b in origin/master origin/dev $(git branch -r | grep origin/release/); do \
           git branch -f ${b#origin/} $b >/dev/null 2>&1; \
       done; \
       git branch -f master origin/master > /dev/null 2>&1; \
       git branch -f dev origin/dev >/dev/null 2>&1; \
       git pull >/dev/null 2>&1; \
       for b in master dev; do \
           git branch --merged origin/$b | grep -Ev '^[ ]*(master|dev|stage|testing|prod|releases?|[*])' | xargs -n 1 git branch -d >/dev/null 2>&1; \
           git branch --merged origin/$b -r | grep -Ev '^[ ]*(master|dev|stage|testing|prod|releases?)' \
                | grep $USER | cut -f2- -d'/' | xargs -n 1 git push --delete $USER >/dev/null 2>&1; \
       done; \
       git branch-gc >/dev/null 2>&1; \
       echo ""; \
       echo Branches remaining after cleanup:; \
       git branch -a; \
       }; f"
    rmt = remote -v
    rod = rebase origin/dev -i
    rom = rebase origin/master -i
    ros = rebase origin/stage -i
    rot = rebase origin/testing -i
    s = show
    # Warning: this converts symlinks to regular files! Consider just using this instead:
    # rg --files | sed -i 's/foo/bar/g'
    sed = "!git ls-files | xargs sed -i"
    shows = show --stat
    ss = show --stat
    st = status
    ud = branch --set-upstream-to=origin/dev
    um = branch --set-upstream-to=origin/master
    us = branch --set-upstream-to=origin/stage
    ut = branch --set-upstream-to=origin/testing

    # List aliases
    la = "!git config -l | grep alias | cut -c 7-"
[color]
    ui = true
    status = true
    branch = true
    diff = true
[core]
    pager = less -F -X -R
    preloadindex = true
    excludesfile = ~/.gitignore_global
[diff]
    algorithm = patience
    renameLimit = 2500
[mergetool "fugitive"]
    cmd = vim -f -c \"Gvdiff\" \"$MERGED\"
[mergetool]
    keepBackup = false
[merge]
    tool = fugitive
[push]
    default = simple
[init]
    templatedir = ~/.git_template
[credential]
    helper = cache --timeout=432000
[grep]
    lineNumber = true
[advice]
    detachedHead = false
[url "git://github.com/ghc/packages-"]
    insteadOf = git://github.com/ghc/packages/
[magit]
  hideCampaign = true

# Allow local customizations
[include]
    path = ~/.gitconfig_local
